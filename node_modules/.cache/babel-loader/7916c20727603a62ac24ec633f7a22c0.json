{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/admin-pc/Desktop/vEngage/SHUBHAM/opterInterface_10th_jan_2021/shubham_operator_interface2021/src/Audio/AudioFile/Audio.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n/**\n * Use case: audio player with dynamic source in react\n *\n * Usage:\n *   <AudioPlayerDOM src={this.state.currentFile}/>\n *\n * Todo: make a better api, actually pass props through\n * Todo: use children instead of passing\n */\n\nexport default class AudioPlayerDOM extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.newFunc = () => {\n      const audio = document.querySelector(\"audio\");\n\n      audio.oncanplaythrough = event => {// console.log('I think I can play thru the entire ' + '\n        //     video without ever having to stop to buffer.');\n      };\n    };\n\n    this.audioupdated = () => {\n      const video = document.querySelector(\"video\");\n      video.addEventListener(\"timeupdate\", event => {\n        console.log(\"The currentTime attribute has been updated. Again.\");\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // Find some DOM nodes\n    const element = ReactDOM.findDOMNode(this);\n    const audio = element.querySelector(\"audio\");\n    const source = audio.querySelector(\"source\"); // When the url changes, we refresh the component manually so it reloads the loaded file\n\n    if (nextProps.src && nextProps.src !== this.props.src) {\n      // Change the source\n      source.src = nextProps.src; // Cause the audio element to load the new source\n\n      audio.load();\n    }\n  }\n\n  render() {\n    // this.videoupdated();\n    // console.log(\"Audio Type\", this.props.src);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        preload: \"metadata\",\n        buffer: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: this.props.src,\n          type: \"audio/x-wav\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/admin-pc/Desktop/vEngage/SHUBHAM/opterInterface_10th_jan_2021/shubham_operator_interface2021/src/Audio/AudioFile/Audio.js"],"names":["React","Component","ReactDOM","AudioPlayerDOM","newFunc","audio","document","querySelector","oncanplaythrough","event","audioupdated","video","addEventListener","console","log","componentWillReceiveProps","nextProps","element","findDOMNode","source","src","props","load","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAepDG,OAfoD,GAe1C,MAAM;AACd,YAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;;AACAF,MAAAA,KAAK,CAACG,gBAAN,GAA0BC,KAAD,IAAW,CAClC;AACA;AACD,OAHD;AAID,KArBmD;;AAAA,SAsBpDC,YAtBoD,GAsBrC,MAAM;AACnB,YAAMC,KAAK,GAAGL,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEAI,MAAAA,KAAK,CAACC,gBAAN,CAAuB,YAAvB,EAAsCH,KAAD,IAAW;AAC9CI,QAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACD,OAFD;AAGD,KA5BmD;AAAA;;AACpDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC;AACA,UAAMC,OAAO,GAAGf,QAAQ,CAACgB,WAAT,CAAqB,IAArB,CAAhB;AACA,UAAMb,KAAK,GAAGY,OAAO,CAACV,aAAR,CAAsB,OAAtB,CAAd;AACA,UAAMY,MAAM,GAAGd,KAAK,CAACE,aAAN,CAAoB,QAApB,CAAf,CAJmC,CAMnC;;AACA,QAAIS,SAAS,CAACI,GAAV,IAAiBJ,SAAS,CAACI,GAAV,KAAkB,KAAKC,KAAL,CAAWD,GAAlD,EAAuD;AACrD;AACAD,MAAAA,MAAM,CAACC,GAAP,GAAaJ,SAAS,CAACI,GAAvB,CAFqD,CAGrD;;AACAf,MAAAA,KAAK,CAACiB,IAAN;AACD;AACF;;AAeDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA,wBACE;AAAA,6BACE;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,OAAO,EAAC,UAAxB;AAAmC,QAAA,MAAM,MAAzC;AAAA,+BACE;AAAQ,UAAA,GAAG,EAAE,KAAKF,KAAL,CAAWD,GAAxB;AAA6B,UAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAzCmD","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n/**\n * Use case: audio player with dynamic source in react\n *\n * Usage:\n *   <AudioPlayerDOM src={this.state.currentFile}/>\n *\n * Todo: make a better api, actually pass props through\n * Todo: use children instead of passing\n */\nexport default class AudioPlayerDOM extends Component {\n  componentWillReceiveProps(nextProps) {\n    // Find some DOM nodes\n    const element = ReactDOM.findDOMNode(this);\n    const audio = element.querySelector(\"audio\");\n    const source = audio.querySelector(\"source\");\n\n    // When the url changes, we refresh the component manually so it reloads the loaded file\n    if (nextProps.src && nextProps.src !== this.props.src) {\n      // Change the source\n      source.src = nextProps.src;\n      // Cause the audio element to load the new source\n      audio.load();\n    }\n  }\n  newFunc = () => {\n    const audio = document.querySelector(\"audio\");\n    audio.oncanplaythrough = (event) => {\n      // console.log('I think I can play thru the entire ' + '\n      //     video without ever having to stop to buffer.');\n    };\n  };\n  audioupdated = () => {\n    const video = document.querySelector(\"video\");\n\n    video.addEventListener(\"timeupdate\", (event) => {\n      console.log(\"The currentTime attribute has been updated. Again.\");\n    });\n  };\n  render() {\n    // this.videoupdated();\n    // console.log(\"Audio Type\", this.props.src);\n    return (\n      <div>\n        <audio controls preload=\"metadata\" buffer>\n          <source src={this.props.src} type=\"audio/x-wav\" />\n          {/* <source src=\"https://www.bensound.com/bensound-music/bensound-summer.mp3\"  type=\"audio/ogg\" /> */}\n        </audio>\n        {/* <button onClick={this.newFunc} >CLick me </button> */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}